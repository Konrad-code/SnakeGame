package com.snake.gui;

/**
 * @author Konrad ¯o³yñski | https://github.com/Konrad-code | konrad.zolynski@gmail.com | +48 533 683 168
**/

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

import com.snake.implementation.CRUD;
import com.snake.implementation.Player;
import com.snake.implementation.PlayerDAO;
import com.snake.implementation.PlayerTableModel;
import com.snake.implementation.StoredProcedures;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

public class AdminFrame extends javax.swing.JFrame implements WindowListener {

	private PlayerDAO player;
    private final Color color = new Color(255, 128, 62);
    private final Color color2 = new Color(255, 128, 28);
    private final Color color3 = new Color(150, 150, 150);
    private final Color color4 = new Color(244, 166, 152);
    private Clip music = null;
    private ImageIcon gameIcon;
    private boolean ifTableExists = false;
    private boolean doesMusicPlay;
    
    public AdminFrame(PlayerDAO player, Clip music, boolean doesMusicPlay) {
        initComponents();
        this.doesMusicPlay = doesMusicPlay;
        this.music = music;
        this.setLocationRelativeTo(null);
        this.addWindowListener(this);
        this.player = player;
        button_loadCommands.setEnabled(true);
        
        if(CRUD.checkIfTableExistsInDatabase())
            ifTableExists = true;
        if(player.getPreparingProceduresInDatabase() != null && !button_dropTable.isEnabled())
        	button_createTable.setEnabled(true);
        if(ifTableExists){
            button_clearRank.setEnabled(true);
            button_delete.setEnabled(true);
            button_deletePlayers.setEnabled(true);
            button_createTable.setEnabled(false);
            button_dropTable.setEnabled(true);
            button_edit.setEnabled(true);
            button_search.setEnabled(true);
        }
        if(!player.getGameSettings().isIfMusic()) {
        	label_play.setEnabled(false);
        	label_stop.setEnabled(false);
        	doesMusicPlay = false;
        }

        gameIcon = new ImageIcon("img\\snake_min.png");
        setIconImage(gameIcon.getImage());
        Border border_panel_title = BorderFactory.createMatteBorder(0, 3, 3, 3, new Color(221, 97, 74));
        panel_title.setBorder(border_panel_title);
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK);
        label_close.setBorder(border);
        label_minimize.setBorder(border);
        button_deletePlayers.setFocusPainted(false);

        Border border_button = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(221, 97, 74));
        button_deletePlayers.setBorder(border_button);
        button_delete.setBorder(border_button);
        button_loadCommands.setBorder(border_button);
        button_dropTable.setBorder(border_button);
        button_createTable.setBorder(border_button);
        button_clearRank.setBorder(border_button);
        button_edit.setBorder(border_button);
        button_search.setBorder(border_button);
        
        Border border_fields = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(255,234,238));
        field_nick.setBorder(border_fields);
        
        table_players.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup_walls = new javax.swing.ButtonGroup();
        buttonGroup_music = new javax.swing.ButtonGroup();
        buttonGroup_eclipse = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lab_iconSnake = new javax.swing.JLabel();
        label_play = new javax.swing.JLabel();
        label_stop = new javax.swing.JLabel();
        button_deletePlayers = new javax.swing.JButton();
        button_loadCommands = new javax.swing.JButton();
        button_dropTable = new javax.swing.JButton();
        button_createTable = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        scrollPane_table = new javax.swing.JScrollPane();
        table_players = new javax.swing.JTable();
        label_search = new javax.swing.JLabel();
        button_search = new javax.swing.JButton();
        button_edit = new javax.swing.JButton();
        button_delete = new javax.swing.JButton();
        field_nick = new javax.swing.JTextField();
        button_clearRank = new javax.swing.JButton();
        label_minimize = new javax.swing.JLabel();
        label_close = new javax.swing.JLabel();
        panel_title = new javax.swing.JPanel();
        label_adminMenu = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(221, 97, 74));

        jPanel2.setBackground(new java.awt.Color(244, 134, 104));

        jPanel3.setBackground(new java.awt.Color(244, 166, 152));

        lab_iconSnake.setBackground(new java.awt.Color(221, 97, 74));
        lab_iconSnake.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        label_play.setBackground(new java.awt.Color(221, 97, 74));
        label_play.setText("label_rank");
        label_play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_playMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                label_playMouseReleased(evt);
            }
        });

        label_stop.setBackground(new java.awt.Color(221, 97, 74));
        label_stop.setText("label_rank");
        label_stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_stopMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                label_stopMouseReleased(evt);
            }
        });

        button_deletePlayers.setBackground(new java.awt.Color(255, 128, 62));
        button_deletePlayers.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_deletePlayers.setForeground(new java.awt.Color(255, 255, 255));
        button_deletePlayers.setText("Delete players");
        button_deletePlayers.setBorder(null);
        button_deletePlayers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_deletePlayers.setEnabled(false);
        button_deletePlayers.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_deletePlayers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_deletePlayersMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_deletePlayersMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button_deletePlayersMouseReleased(evt);
            }
        });
        button_deletePlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deletePlayersActionPerformed(evt);
            }
        });

        button_loadCommands.setBackground(new java.awt.Color(255, 128, 62));
        button_loadCommands.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_loadCommands.setForeground(new java.awt.Color(255, 255, 255));
        button_loadCommands.setText("Load commands");
        button_loadCommands.setBorder(null);
        button_loadCommands.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_loadCommands.setEnabled(false);
        button_loadCommands.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_loadCommands.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_loadCommandsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_loadCommandsMouseExited(evt);
            }
        });
        button_loadCommands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadCommandsActionPerformed(evt);
            }
        });

        button_dropTable.setBackground(new java.awt.Color(255, 128, 62));
        button_dropTable.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_dropTable.setForeground(new java.awt.Color(255, 255, 255));
        button_dropTable.setText("Drop table");
        button_dropTable.setBorder(null);
        button_dropTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_dropTable.setEnabled(false);
        button_dropTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_dropTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_dropTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_dropTableMouseExited(evt);
            }
        });
        button_dropTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_dropTableActionPerformed(evt);
            }
        });

        button_createTable.setBackground(new java.awt.Color(255, 128, 62));
        button_createTable.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_createTable.setForeground(new java.awt.Color(255, 255, 255));
        button_createTable.setText("Create table");
        button_createTable.setBorder(null);
        button_createTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_createTable.setEnabled(false);
        button_createTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_createTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_createTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_createTableMouseExited(evt);
            }
        });
        button_createTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_createTableActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 234, 238));
        jPanel4.setPreferredSize(new java.awt.Dimension(555, 229));

        scrollPane_table.setBackground(new java.awt.Color(255, 234, 238));
        scrollPane_table.setToolTipText("");
        scrollPane_table.setOpaque(false);

        table_players.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane_table.setViewportView(table_players);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_table, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane_table, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );

        label_search.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        label_search.setText("Search player");

        button_search.setBackground(new java.awt.Color(255, 128, 62));
        button_search.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_search.setForeground(new java.awt.Color(255, 255, 255));
        button_search.setText("Search");
        button_search.setBorder(null);
        button_search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_search.setEnabled(false);
        button_search.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_searchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_searchMouseExited(evt);
            }
        });
        button_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_searchActionPerformed(evt);
            }
        });

        button_edit.setBackground(new java.awt.Color(255, 128, 62));
        button_edit.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_edit.setForeground(new java.awt.Color(255, 255, 255));
        button_edit.setText("Edit");
        button_edit.setBorder(null);
        button_edit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_edit.setEnabled(false);
        button_edit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_editMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_editMouseExited(evt);
            }
        });
        button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_editActionPerformed(evt);
            }
        });

        button_delete.setBackground(new java.awt.Color(255, 128, 62));
        button_delete.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_delete.setForeground(new java.awt.Color(255, 255, 255));
        button_delete.setText("Delete");
        button_delete.setBorder(null);
        button_delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_delete.setEnabled(false);
        button_delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_deleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_deleteMouseExited(evt);
            }
        });
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });

        field_nick.setBackground(new java.awt.Color(255, 234, 238));
        field_nick.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        field_nick.setForeground(new java.awt.Color(153, 153, 153));
        field_nick.setText("nickname");
        field_nick.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_nickFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_nickFocusLost(evt);
            }
        });

        button_clearRank.setBackground(new java.awt.Color(255, 128, 62));
        button_clearRank.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_clearRank.setForeground(new java.awt.Color(255, 255, 255));
        button_clearRank.setText("Clear rank");
        button_clearRank.setBorder(null);
        button_clearRank.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_clearRank.setEnabled(false);
        button_clearRank.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_clearRank.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_clearRankMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_clearRankMouseExited(evt);
            }
        });
        button_clearRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_clearRankActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addGap(0, 0, Short.MAX_VALUE))
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addGap(0, 245, Short.MAX_VALUE)
        					.addComponent(lab_iconSnake, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
        					.addGap(137)
        					.addComponent(label_stop, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
        					.addGap(10)
        					.addComponent(label_play, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addGap(32)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addGap(14)
        					.addComponent(label_search, GroupLayout.PREFERRED_SIZE, 153, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(field_nick, 331, 331, 331))
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addComponent(button_loadCommands, GroupLayout.PREFERRED_SIZE, 240, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
        					.addComponent(button_deletePlayers, GroupLayout.PREFERRED_SIZE, 231, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(button_search, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(button_createTable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addPreferredGap(ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(button_edit, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(button_clearRank, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addGap(16)
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(button_dropTable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        						.addComponent(button_delete, GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
        			.addGap(35))
        );
        jPanel3Layout.setVerticalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 243, GroupLayout.PREFERRED_SIZE)
        			.addGap(19)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(label_search, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(field_nick, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        			.addGap(22)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(button_search, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        				.addComponent(button_edit, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        				.addComponent(button_delete, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(button_dropTable, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        				.addComponent(button_createTable, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        				.addComponent(button_clearRank, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(button_deletePlayers, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        				.addComponent(button_loadCommands, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(lab_iconSnake, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(label_play, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
        					.addComponent(label_stop, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap())
        );
        jPanel3.setLayout(jPanel3Layout);

        lab_iconSnake.setIcon(new ImageIcon(getClass().getResource("/snake_min.png")));
        lab_iconSnake.addMouseListener(new MouseAdapter() {  
            public void mouseClicked(MouseEvent e) {  
            	System.out.println("Magic snake moves you to Login menu");
                LoginFrame frame = new LoginFrame(player, music, doesMusicPlay);
                frame.setVisible(true);
                frame.pack();
                frame.setLocationRelativeTo(null);
                dispose();
            }  
        }); 
        
        label_stop.setIcon(new ImageIcon(getClass().getResource("/stop.png")));
        label_play.setIcon(new ImageIcon(getClass().getResource("/play.png")));
        
        label_minimize.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_minimize.setText(" -");
        label_minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        label_minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_minimizeMouseClicked(evt);
            }
        });

        label_close.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_close.setText(" X");
        label_close.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        label_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_closeMouseClicked(evt);
            }
        });

        panel_title.setBackground(new java.awt.Color(183, 80, 61));

        label_adminMenu.setFont(new java.awt.Font("Franklin Gothic Book", 1, 65)); // NOI18N
        label_adminMenu.setForeground(new java.awt.Color(255, 255, 255));
        label_adminMenu.setText("Admin menu");

        javax.swing.GroupLayout panel_titleLayout = new javax.swing.GroupLayout(panel_title);
        panel_title.setLayout(panel_titleLayout);
        panel_titleLayout.setHorizontalGroup(
            panel_titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_titleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_adminMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );
        panel_titleLayout.setVerticalGroup(
            panel_titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label_adminMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_close, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_close, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panel_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    // AFTER
    private void button_deletePlayersActionPerformed(java.awt.event.ActionEvent evt) {                                                     
    	System.out.println("Delete all players button pushed");
        player.deletePlayers();
    }                                                    

    private void button_deletePlayersMouseEntered(java.awt.event.MouseEvent evt) {                                                  
        button_deletePlayers.setBackground(color2);
        button_deletePlayers.setForeground(color4);
    }                                                 

    private void button_deletePlayersMouseExited(java.awt.event.MouseEvent evt) {                                                 
        button_deletePlayers.setBackground(color);
        button_deletePlayers.setForeground(Color.WHITE);
    }                                                

    private void label_stopMouseClicked(java.awt.event.MouseEvent evt) {                                        
        
    }                                       

    private void label_playMouseClicked(java.awt.event.MouseEvent evt) {                                        
        
    }                                       

    private void label_minimizeMouseClicked(java.awt.event.MouseEvent evt) {                                            
        this.setState(JFrame.ICONIFIED);
    }                                           

    private void label_closeMouseClicked(java.awt.event.MouseEvent evt) {                                         
        System.exit(0);
    }                                        

    private void label_stopMouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(music.isRunning() && player.getGameSettings().isIfMusic()){
            music.stop();
            doesMusicPlay = false;
        }
    }                                        

    private void label_playMouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(!music.isRunning() && player.getGameSettings().isIfMusic()){
            music.start();
            doesMusicPlay = true;
        }
    }                                        
    
    private void button_loadCommandsMouseEntered(java.awt.event.MouseEvent evt) {                                                 
        button_loadCommands.setBackground(color2);
        button_loadCommands.setForeground(color4);
    }                                                

    private void button_loadCommandsMouseExited(java.awt.event.MouseEvent evt) {                                                
        button_loadCommands.setBackground(color);
        button_loadCommands.setForeground(Color.WHITE);
    }                                               

    private void button_loadCommandsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        System.out.println("Load commands button pushed");
        if(player.getPreparingProceduresInDatabase() != null)
        	System.out.println("Already loaded");
        else {
        	player.setPreparingProceduresInDatabase(StoredProcedures.getInstance());
        	if(player.getPreparingProceduresInDatabase() != null)
        		button_createTable.setEnabled(true);
        }
    }                                                   

    private void button_dropTableMouseEntered(java.awt.event.MouseEvent evt) {                                              
        button_dropTable.setBackground(color2);
        button_dropTable.setForeground(color4);
    }                                             

    private void button_dropTableMouseExited(java.awt.event.MouseEvent evt) {                                             
        button_dropTable.setBackground(color);
        button_dropTable.setForeground(Color.WHITE);
    }                                            

    private void button_dropTableActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        System.out.println("Drop table button pushed");
        player.dropTable();
        if(!CRUD.checkIfTableExistsInDatabase()) {
            ifTableExists = false;
            button_clearRank.setEnabled(false);
            button_delete.setEnabled(false);
            button_deletePlayers.setEnabled(false);
            button_createTable.setEnabled(true);
            button_dropTable.setEnabled(false);
            button_edit.setEnabled(false);
            button_search.setEnabled(false);
        }
        else
        	System.out.println("Failed to drop table");
    }                                                

    private void button_createTableMouseEntered(java.awt.event.MouseEvent evt) {                                                
        button_createTable.setBackground(color2);
        button_createTable.setForeground(color4);
    }                                               

    private void button_createTableMouseExited(java.awt.event.MouseEvent evt) {                                               
        button_createTable.setBackground(color);
        button_createTable.setForeground(Color.WHITE);
    }                                              

    private void button_createTableActionPerformed(java.awt.event.ActionEvent evt) {                                                   
    	System.out.println("Trying to create table");
    	player.createTable();
    	if(CRUD.checkIfTableExistsInDatabase()) {
            ifTableExists = true;
            button_clearRank.setEnabled(true);
            button_delete.setEnabled(true);
            button_deletePlayers.setEnabled(true);
            button_createTable.setEnabled(false);
            button_dropTable.setEnabled(true);
            button_edit.setEnabled(true);
            button_search.setEnabled(true);
        }
        else
        	System.out.println("Failed to create table");
    }                                                  

    private void button_deletePlayersMouseReleased(java.awt.event.MouseEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void button_searchMouseEntered(java.awt.event.MouseEvent evt) {                                           
        button_search.setBackground(color2);
        button_search.setForeground(color4);
    }                                          

    private void button_searchMouseExited(java.awt.event.MouseEvent evt) {                                          
        button_search.setBackground(color);
        button_search.setForeground(Color.WHITE);
    }                                         

    private void button_searchActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            String nick = field_nick.getText();
            List<Player> players = null;
            
            if(nick != null && nick.trim().length() > 4)
                players = player.searchPlayers(nick);
            else
                players = player.getAllPlayers();
            
            System.out.println("Before print");
            players.forEach(p -> System.out.println(p));
            System.out.println("After print");
            
            PlayerTableModel tableModel = new PlayerTableModel(players);
            table_players.setModel(tableModel);
            table_players.setVisible(true);
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }                                             

    private void button_editMouseEntered(java.awt.event.MouseEvent evt) {                                         
        button_edit.setBackground(color2);
        button_edit.setForeground(color4);
    }                                        

    private void button_editMouseExited(java.awt.event.MouseEvent evt) {                                        
        button_edit.setBackground(color);
        button_edit.setForeground(Color.WHITE);
    }                                       

    private void button_editActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void button_deleteMouseEntered(java.awt.event.MouseEvent evt) {                                           
        button_delete.setBackground(color2);
        button_delete.setForeground(color4);
    }                                          

    private void button_deleteMouseExited(java.awt.event.MouseEvent evt) {                                          
        button_delete.setBackground(color);
        button_delete.setForeground(Color.WHITE);
    }                                         

    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {                                              
    	String nickToDelete = field_nick.getText();
    	player.deletePlayer(nickToDelete);
    }                                             

    private void field_nickFocusGained(java.awt.event.FocusEvent evt) {                                       
        if(field_nick.getText().trim().toLowerCase().equals("username")) {
            field_nick.setText("");
            field_nick.setForeground(Color.BLACK);
        }
    }                                      

    private void field_nickFocusLost(java.awt.event.FocusEvent evt) {                                     
        if(field_nick.getText().trim().toLowerCase().equals("username") || field_nick.getText().trim().toLowerCase().equals("")) {
            field_nick.setText("username");
            field_nick.setForeground(color3);
        }
    }                                    

    private void button_clearRankMouseEntered(java.awt.event.MouseEvent evt) {                                              
        button_clearRank.setBackground(color2);
        button_clearRank.setForeground(color4);
    }                                             

    private void button_clearRankMouseExited(java.awt.event.MouseEvent evt) {                                             
        button_clearRank.setBackground(color);
        button_clearRank.setForeground(Color.WHITE);
    }                                            

    private void button_clearRankActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    	System.out.println("Clear rank button pushed");
        player.clearRank();
    }                                                

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup_eclipse;
    private javax.swing.ButtonGroup buttonGroup_music;
    private javax.swing.ButtonGroup buttonGroup_walls;
    private javax.swing.JButton button_clearRank;
    private javax.swing.JButton button_createTable;
    private javax.swing.JButton button_delete;
    private javax.swing.JButton button_deletePlayers;
    private javax.swing.JButton button_dropTable;
    private javax.swing.JButton button_edit;
    private javax.swing.JButton button_loadCommands;
    private javax.swing.JButton button_search;
    private javax.swing.JTextField field_nick;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lab_iconSnake;
    private javax.swing.JLabel label_adminMenu;
    private javax.swing.JLabel label_close;
    private javax.swing.JLabel label_minimize;
    private javax.swing.JLabel label_play;
    private javax.swing.JLabel label_search;
    private javax.swing.JLabel label_stop;
    private javax.swing.JPanel panel_title;
    private javax.swing.JScrollPane scrollPane_table;
    private javax.swing.JTable table_players;
    // End of variables declaration                   

    @Override
    public void windowOpened(WindowEvent e) {}
    @Override
    public void windowClosing(WindowEvent e) {}
    @Override
    public void windowClosed(WindowEvent e) {}
    @Override
    public void windowActivated(WindowEvent e) {}
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {
        if(music.isRunning() && player.getGameSettings().isIfMusic()){
            music.stop();
            System.out.println("Music stopped");
        }
        System.out.println("Window iconified");
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        if(!music.isRunning() && doesMusicPlay && player.getGameSettings().isIfMusic()){
            music.start();
            System.out.println("Music is back");
        }
        System.out.println("Window deiconified");
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AdminFrame(new PlayerDAO(true), null, true).setVisible(true);
//                
//            }
//        });
//    }
}
