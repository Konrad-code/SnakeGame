package com.snake.gui;

/**
 * @author Konrad ¯o³yñski | https://github.com/Konrad-code | konrad.zolynski@gmail.com | +48 533 683 168
**/

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

import com.snake.exceptions.ForbiddenCharacterNickname;
import com.snake.exceptions.ForbiddenCharacterPassword;
import com.snake.exceptions.ForbiddenCharacterUsername;
import com.snake.exceptions.NoDigit;
import com.snake.exceptions.NoLowercaseLetter;
import com.snake.exceptions.NoSpecialCharacter;
import com.snake.exceptions.NoUppercaseLetter;
import com.snake.exceptions.TooShortOrLongNickname;
import com.snake.exceptions.TooShortOrLongPassword;
import com.snake.exceptions.TooShortOrLongUsername;
import com.snake.exceptions.WrongConfirmation;
import com.snake.implementation.CRUD;
import com.snake.implementation.Player;
import com.snake.implementation.PlayerDAO;

public class RegisterFrame extends javax.swing.JFrame implements WindowListener {

	private PlayerDAO player;
    private final Color color = new Color(255, 128, 62);
    private final Color color2 = new Color(255, 128, 28);
    private final Color color3 = new Color(150, 150, 150);
    private final Color color4 = new Color(244, 166, 152);
    private Clip music = null;
    private ImageIcon gameIcon;
    private boolean ifTableExists = false;
    private boolean doesMusicPlay;
    
    public RegisterFrame(PlayerDAO player, Clip music, boolean doesMusicPlay) {
        initComponents();
        this.doesMusicPlay = doesMusicPlay;
        this.music = music;
        this.player = player;
        this.setLocationRelativeTo(null);
        this.addWindowListener(this);
        
        if(CRUD.checkIfTableExistsInDatabase())
            ifTableExists = true;
        if(!ifTableExists){
            button_showRank.setEnabled(false);
            button_register.setEnabled(false);
            button_logout.setEnabled(false);
          }
        if(player.getPlayerNickname().length() < 1)
        	button_logout.setEnabled(false);
        if(!player.getGameSettings().isIfMusic()) {
        	label_play.setEnabled(false);
        	label_stop.setEnabled(false);
        	doesMusicPlay = false;
        }

        gameIcon = new ImageIcon("img\\snake_min.png");
        setIconImage(gameIcon.getImage());
        Border border_panel_title = BorderFactory.createMatteBorder(0, 3, 3, 3, new Color(221, 97, 74));
        panel_title.setBorder(border_panel_title);
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK);
        label_close.setBorder(border);
        label_minimize.setBorder(border);
        button_logout.setFocusPainted(false);

        Border border_button = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(221, 97, 74));
        button_logout.setBorder(border_button);
        button_register.setBorder(border_button);
        button_quickPlay.setBorder(border_button);
        button_gameSettings.setBorder(border_button);
        button_showRank.setBorder(border_button);
        
        Border border_fields = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(255,234,238));
        field_user.setBorder(border_fields);
        field_password.setBorder(border_fields);
        field_passwordConfirmation.setBorder(border_fields);
        field_nickname.setBorder(border_fields);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lab_iconSnake = new javax.swing.JLabel();
        label_play = new javax.swing.JLabel();
        label_stop = new javax.swing.JLabel();
        button_logout = new javax.swing.JButton();
        label_password = new javax.swing.JLabel();
        label_user = new javax.swing.JLabel();
        field_password = new javax.swing.JPasswordField();
        field_user = new javax.swing.JTextField();
        button_register = new javax.swing.JButton();
        button_quickPlay = new javax.swing.JButton();
        button_gameSettings = new javax.swing.JButton();
        button_showRank = new javax.swing.JButton();
        field_passwordConfirmation = new javax.swing.JPasswordField();
        field_nickname = new javax.swing.JTextField();
        label_nickname = new javax.swing.JLabel();
        label_passwordConfirmation = new javax.swing.JLabel();
        label_minimize = new javax.swing.JLabel();
        label_close = new javax.swing.JLabel();
        panel_title = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(221, 97, 74));

        jPanel2.setBackground(new java.awt.Color(244, 134, 104));

        jPanel3.setBackground(new java.awt.Color(244, 166, 152));

        lab_iconSnake.setBackground(new java.awt.Color(221, 97, 74));
        lab_iconSnake.setOpaque(false);

        label_play.setBackground(new java.awt.Color(221, 97, 74));
        label_play.setText("jLabel1");
        label_play.setOpaque(false);
        label_play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_playMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                label_playMouseReleased(evt);
            }
        });

        label_stop.setBackground(new java.awt.Color(221, 97, 74));
        label_stop.setText("jLabel1");
        label_stop.setOpaque(false);
        label_stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_stopMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                label_stopMouseReleased(evt);
            }
        });

        button_logout.setBackground(new java.awt.Color(255, 128, 62));
        button_logout.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_logout.setForeground(new java.awt.Color(255, 255, 255));
        button_logout.setText("Logout");
        button_logout.setBorder(null);
        button_logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_logout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_logoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_logoutMouseExited(evt);
            }
        });
        button_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_logoutActionPerformed(evt);
            }
        });

        label_password.setBackground(new java.awt.Color(221, 97, 74));
        label_password.setText("jLabel1");
        label_password.setOpaque(false);

        label_user.setBackground(new java.awt.Color(221, 97, 74));
        label_user.setText("jLabel1");
        label_user.setOpaque(false);

        field_password.setBackground(new java.awt.Color(255, 234, 238));
        field_password.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        field_password.setForeground(new java.awt.Color(153, 153, 153));
        field_password.setText("passwor");
        field_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_passwordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_passwordFocusLost(evt);
            }
        });

        field_user.setBackground(new java.awt.Color(255, 234, 238));
        field_user.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        field_user.setForeground(new java.awt.Color(153, 153, 153));
        field_user.setText("username");
        field_user.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_userFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_userFocusLost(evt);
            }
        });

        button_register.setBackground(new java.awt.Color(255, 128, 62));
        button_register.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_register.setForeground(new java.awt.Color(255, 255, 255));
        button_register.setText("Register");
        button_register.setBorder(null);
        button_register.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_register.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_register.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_registerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_registerMouseExited(evt);
            }
        });
        button_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_registerActionPerformed(evt);
            }
        });

        button_quickPlay.setBackground(new java.awt.Color(255, 128, 62));
        button_quickPlay.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_quickPlay.setForeground(new java.awt.Color(255, 255, 255));
        button_quickPlay.setText("Quick Play");
        button_quickPlay.setBorder(null);
        button_quickPlay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_quickPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_quickPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_quickPlayMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_quickPlayMouseExited(evt);
            }
        });
        button_quickPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_quickPlayActionPerformed(evt);
            }
        });

        button_gameSettings.setBackground(new java.awt.Color(255, 128, 62));
        button_gameSettings.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_gameSettings.setForeground(new java.awt.Color(255, 255, 255));
        button_gameSettings.setText("Game Settings");
        button_gameSettings.setBorder(null);
        button_gameSettings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_gameSettings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_gameSettings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_gameSettingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_gameSettingsMouseExited(evt);
            }
        });
        button_gameSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_gameSettingsActionPerformed(evt);
            }
        });

        button_showRank.setBackground(new java.awt.Color(255, 128, 62));
        button_showRank.setFont(new java.awt.Font("Franklin Gothic Book", 1, 30)); // NOI18N
        button_showRank.setForeground(new java.awt.Color(255, 255, 255));
        button_showRank.setText("Show Rank");
        button_showRank.setBorder(null);
        button_showRank.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_showRank.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_showRank.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_showRankMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_showRankMouseExited(evt);
            }
        });
        button_showRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_showRankActionPerformed(evt);
            }
        });

        field_passwordConfirmation.setBackground(new java.awt.Color(255, 234, 238));
        field_passwordConfirmation.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        field_passwordConfirmation.setForeground(new java.awt.Color(153, 153, 153));
        field_passwordConfirmation.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        field_passwordConfirmation.setText("passwor");
        field_passwordConfirmation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_passwordConfirmationFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_passwordConfirmationFocusLost(evt);
            }
        });
        field_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field_passwordActionPerformed(evt);
            }
        });

        field_nickname.setBackground(new java.awt.Color(255, 234, 238));
        field_nickname.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        field_nickname.setForeground(new java.awt.Color(153, 153, 153));
        field_nickname.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        field_nickname.setText("nickname");
        field_nickname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_nicknameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                field_nicknameFocusLost(evt);
            }
        });

        label_nickname.setBackground(new java.awt.Color(221, 97, 74));
        label_nickname.setText("jLabel1");
        label_nickname.setOpaque(false);

        label_passwordConfirmation.setBackground(new java.awt.Color(221, 97, 74));
        label_passwordConfirmation.setText("jLabel1");
        label_passwordConfirmation.setOpaque(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(label_password, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(field_password, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(label_user, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(field_user, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(field_nickname)
                            .addComponent(field_passwordConfirmation, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lab_iconSnake, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141)
                        .addComponent(label_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(label_play, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label_nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_passwordConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_showRank, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_gameSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_quickPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_register, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(label_nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_passwordConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_user, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(field_user, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(field_nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(label_password, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(field_password, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(field_passwordConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(button_register, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(button_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(button_quickPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(button_gameSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(button_showRank, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)))))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lab_iconSnake, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(label_play, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        lab_iconSnake.setIcon(new ImageIcon(getClass().getResource("/snake_min.png")));
        label_stop.setIcon(new ImageIcon(getClass().getResource("/stop.png")));
        label_password.setIcon(new ImageIcon(getClass().getResource("/key.png")));
        label_user.setIcon(new ImageIcon(getClass().getResource("/user.png")));
        label_play.setIcon(new ImageIcon(getClass().getResource("/play.png")));
        label_nickname.setIcon(new ImageIcon(getClass().getResource("/nickname.png")));
        label_passwordConfirmation.setIcon(new ImageIcon(getClass().getResource("/repeat.png")));

        label_minimize.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_minimize.setText(" -");
        label_minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        label_minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_minimizeMouseClicked(evt);
            }
        });

        label_close.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_close.setText(" X");
        label_close.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        label_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_closeMouseClicked(evt);
            }
        });

        panel_title.setBackground(new java.awt.Color(183, 80, 61));

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 1, 65)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Register");

        javax.swing.GroupLayout panel_titleLayout = new javax.swing.GroupLayout(panel_title);
        panel_title.setLayout(panel_titleLayout);
        panel_titleLayout.setHorizontalGroup(
            panel_titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_titleLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel_titleLayout.setVerticalGroup(
            panel_titleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_titleLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(140, Short.MAX_VALUE)
                .addComponent(panel_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(label_minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_close, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_close, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panel_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    // AFTER
    
    private void field_passwordActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }    
    
    private void button_logoutActionPerformed(java.awt.event.ActionEvent evt) {                                              
        System.out.println("Logout button pushed");
        LoginFrame frame = new LoginFrame(doesMusicPlay);
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        this.dispose();
    }                                             

    private void button_logoutMouseEntered(java.awt.event.MouseEvent evt) {                                           
        button_logout.setBackground(color2);
        button_logout.setForeground(color4);
    }                                          

    private void button_logoutMouseExited(java.awt.event.MouseEvent evt) {                                          
        button_logout.setBackground(color);
        button_logout.setForeground(Color.WHITE);
    }                                                                               

    private void label_stopMouseClicked(java.awt.event.MouseEvent evt) {                                        
        
    }                                       

    private void label_playMouseClicked(java.awt.event.MouseEvent evt) {                                        
        
    }                                       

    private void field_userFocusGained(java.awt.event.FocusEvent evt) {                                       
        if(field_user.getText().trim().toLowerCase().equals("username")) {
            field_user.setText("");
            field_user.setForeground(Color.BLACK);
        }
    }                                      

    private void field_userFocusLost(java.awt.event.FocusEvent evt) {                                     
        if(field_user.getText().trim().toLowerCase().equals("username") || field_user.getText().trim().toLowerCase().equals("")) {
            field_user.setText("username");
            field_user.setForeground(color3);
        }
    }                                    

    private void field_passwordFocusGained(java.awt.event.FocusEvent evt) {                                           
        String password = String.valueOf(field_password.getPassword());
        if(password.trim().toLowerCase().equals("passwor")) {
            field_password.setText("");
            field_password.setForeground(Color.BLACK);
        }
    }                                          

    private void field_passwordFocusLost(java.awt.event.FocusEvent evt) {                                         
        String password = String.valueOf(field_password.getPassword());
        if(password.trim().toLowerCase().equals("passwor") || password.trim().toLowerCase().equals("")) {
            field_password.setText("passwor");
            field_password.setForeground(color3);
        }
    }                                        

    private void label_minimizeMouseClicked(java.awt.event.MouseEvent evt) {                                            
        this.setState(JFrame.ICONIFIED);
    }                                           

    private void label_closeMouseClicked(java.awt.event.MouseEvent evt) {                                         
        System.exit(0);
    }                                        

    private void label_stopMouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(music.isRunning() && player.getGameSettings().isIfMusic()){
            music.stop();
            doesMusicPlay = false;
        }
    }                                        

    private void label_playMouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(!music.isRunning() && player.getGameSettings().isIfMusic()){
            music.start();
            doesMusicPlay = true;
        }
    }                                        

    private void button_registerMouseEntered(java.awt.event.MouseEvent evt) {                                             
        button_register.setBackground(color2);
        button_register.setForeground(color4);
    }                                            

    private void button_registerMouseExited(java.awt.event.MouseEvent evt) {                                            
        button_register.setBackground(color);
        button_register.setForeground(Color.WHITE);
    }                                           

    public boolean verifyString(String toTest){
        boolean hasForbiddenCharacter = false;
        int lowercaseCounter = 0, uppercaseCounter = 0, specialCharacterCounter = 0, digitCounter = 0;
        for(int i = 0; i < toTest.length(); i++) {
            if((toTest.charAt(i) >= 'A') && (toTest.charAt(i) <= 'Z'))
                uppercaseCounter++;
            if((toTest.charAt(i) >= 'a') && (toTest.charAt(i) <= 'z'))
                lowercaseCounter++;
            if((toTest.charAt(i) >= '0') && (toTest.charAt(i) <= '9'))
                digitCounter++;
            if((toTest.charAt(i) >= 32) && (toTest.charAt(i) <= 47) || (toTest.charAt(i) >= 58) && (toTest.charAt(i)) <= 64
                    || (toTest.charAt(i) >= 92) && (toTest.charAt(i)) <= 96 || (toTest.charAt(i) >= 123) && (toTest.charAt(i)) <= 126)
                specialCharacterCounter++;
            if((specialCharacterCounter + digitCounter + lowercaseCounter + uppercaseCounter) < i)
                hasForbiddenCharacter = true;
        }
        return hasForbiddenCharacter;
    }
    
    public boolean verifyData(String usernameProvided, String nicknameProvided, String passwordProvided, String passwordConfirmationProvided){
        int lowercaseCounter = 0, uppercaseCounter = 0, specialCharacterCounter = 0, digitCounter = 0;
        boolean verificationPassed = false;
    	uppercaseCounter = lowercaseCounter = digitCounter = specialCharacterCounter = 0;
        System.out.println("Password provided: " + passwordProvided + "\nPassword confirmation provided: " + passwordConfirmationProvided
                         + "\nUsername provided: " + usernameProvided + "\nNickname provided: " + nicknameProvided);
        try {
            if(!passwordProvided.equals(passwordConfirmationProvided))
                throw new WrongConfirmation();
            if(passwordProvided.length() < 8 || passwordProvided.length() > 30)
                throw new TooShortOrLongPassword();
            if(usernameProvided.length() < 4 || usernameProvided.length() > 20)
                throw new TooShortOrLongUsername();
            if(nicknameProvided.length() < 4 || nicknameProvided.length() > 15)
                throw new TooShortOrLongNickname();
            if(verifyString(usernameProvided))
                throw new ForbiddenCharacterPassword();
            if(verifyString(nicknameProvided))
                throw new ForbiddenCharacterNickname();
            if(verifyString(passwordProvided))
                throw new ForbiddenCharacterUsername();
            for(int i = 0; i < passwordProvided.length(); i++) {
                if((passwordProvided.charAt(i) >= 'A') && (passwordProvided.charAt(i) <= 'Z'))
                    uppercaseCounter++;
                if((passwordProvided.charAt(i) >= 'a') && (passwordProvided.charAt(i) <= 'z'))
                    lowercaseCounter++;
                if((passwordProvided.charAt(i) >= '0') && (passwordProvided.charAt(i) <= '9'))
                    digitCounter++;
                if((passwordProvided.charAt(i) >= 32) && (passwordProvided.charAt(i) <= 47)
                        || (passwordProvided.charAt(i) >= 58) && (passwordProvided.charAt(i)) <= 64
                        || (passwordProvided.charAt(i) >= 92) && (passwordProvided.charAt(i)) <= 96
                        || (passwordProvided.charAt(i) >= 123) && (passwordProvided.charAt(i)) <= 126)
                    specialCharacterCounter++;
            }
            if(uppercaseCounter < 1)
            	throw new NoUppercaseLetter();
            if(lowercaseCounter < 1)
                throw new NoLowercaseLetter();
            if(digitCounter < 1)
                throw new NoDigit();
            if(specialCharacterCounter < 1)
                throw new NoSpecialCharacter();   
            verificationPassed = true;
        } catch(TooShortOrLongPassword tsolp) { /* leave action */
        } catch(TooShortOrLongUsername tsolu) { /* leave action */
        } catch(TooShortOrLongNickname tsoln) { /* leave action */
        } catch(NoUppercaseLetter nul) { /* leave action */
        } catch(NoLowercaseLetter nll) { /* leave action */
        } catch(NoDigit nd) { /* leave action */
        } catch(NoSpecialCharacter nsc) { /* leave action */
        } catch(ForbiddenCharacterPassword fcp) { /* leave action */
        } catch(ForbiddenCharacterUsername fcu) { /* leave action */
        } catch(ForbiddenCharacterNickname fcn) { /* leave action */
        } catch(WrongConfirmation wc){ /* leave action */
        }
        return verificationPassed;
    }
    
    public Player verify(){
        Player playerToRegister = null;
        String usernameProvided = field_user.getText().trim();
        String nicknameProvided = field_nickname.getText().trim();
        String passwordProvided = String.valueOf(field_password.getPassword()).trim();
        String passwordConfirmationProvided = String.valueOf(field_passwordConfirmation.getPassword()).trim();
        
        boolean ifCorrect = verifyData(usernameProvided, nicknameProvided, passwordProvided, passwordConfirmationProvided);
        if(ifCorrect)
            playerToRegister = new Player(usernameProvided, nicknameProvided, passwordProvided);
        return playerToRegister;
    }
    
    private void button_registerActionPerformed(java.awt.event.ActionEvent evt) {                                                
        System.out.println("Register button pushed");
        boolean isFree = false;
        Player newPlayerToRegister = verify();
        if(newPlayerToRegister != null){
            System.out.println("git");
            String message = new String("Password: " + newPlayerToRegister.getPassword()
                         + "\nUsername: " + newPlayerToRegister.getLogin() + "\nNickname: " + newPlayerToRegister.getNickname());
            System.out.println(message);

            if(player.checkNick(newPlayerToRegister.getNickname()))
                isFree = true;
            else
                JOptionPane.showMessageDialog(null, "Nickname occupied. Provide other nickname");
            if(!(isFree && player.checkLogin(newPlayerToRegister.getLogin()))){
                isFree = false;
                JOptionPane.showMessageDialog(null, "Username occupied. Provide other username");
            }
            if(isFree){
                player.addPlayer(newPlayerToRegister);
                JOptionPane.showMessageDialog(null, "New user created successfully!\n" + message);
                LoginFrame frame = new LoginFrame(player, music, doesMusicPlay);
       			frame.setVisible(true);
        		frame.pack();
        		frame.setLocationRelativeTo(null);
        		music.stop();
        		this.dispose();
            }
        }
    }                                               

    private void button_quickPlayMouseEntered(java.awt.event.MouseEvent evt) {                                              
        button_quickPlay.setBackground(color2);
        button_quickPlay.setForeground(color4);
    }                                             

    private void button_quickPlayMouseExited(java.awt.event.MouseEvent evt) {                                             
        button_quickPlay.setBackground(color);
        button_quickPlay.setForeground(Color.WHITE);
    }                                            

    private void button_quickPlayActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    	System.out.println("Quick play button pushed");
        GameFrame frame = new GameFrame(player, music, doesMusicPlay);
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        this.dispose();
    }                                                

    private void button_gameSettingsMouseEntered(java.awt.event.MouseEvent evt) {                                                 
        button_gameSettings.setBackground(color2);
        button_gameSettings.setForeground(color4);
    }                                                

    private void button_gameSettingsMouseExited(java.awt.event.MouseEvent evt) {                                                
        button_gameSettings.setBackground(color);
        button_gameSettings.setForeground(Color.WHITE);
    }                                               

    private void button_gameSettingsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        System.out.println("Game settings button pushed");
        GameSettingsFrame frame = new GameSettingsFrame(player, music, doesMusicPlay);
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        this.dispose();
    }                                                   

    private void button_showRankMouseEntered(java.awt.event.MouseEvent evt) {                                             
        button_showRank.setBackground(color2);
        button_showRank.setForeground(color4);
    }                                            

    private void button_showRankMouseExited(java.awt.event.MouseEvent evt) {                                            
        button_showRank.setBackground(color);
        button_showRank.setForeground(Color.WHITE);
    }                                           

    private void button_showRankActionPerformed(java.awt.event.ActionEvent evt) {
    	System.out.println("Show rank button pushed");
        RankingFrame frame = new RankingFrame(player, music, doesMusicPlay);
        frame.setVisible(true);
        frame.pack();
        frame.setLocationRelativeTo(null);
        this.dispose();
    }

    private void field_passwordConfirmationFocusGained(java.awt.event.FocusEvent evt) {                                                       
        String password = String.valueOf(field_passwordConfirmation.getPassword());
        if(password.trim().toLowerCase().equals("passwor")) {
            field_passwordConfirmation.setText("");
            field_passwordConfirmation.setForeground(Color.BLACK);
        }      
    }                                                      

    private void field_passwordConfirmationFocusLost(java.awt.event.FocusEvent evt) {                                                     
        String password = String.valueOf(field_passwordConfirmation.getPassword());
        if(password.trim().toLowerCase().equals("passwor") || password.trim().toLowerCase().equals("")) {
            field_passwordConfirmation.setText("passwor");
            field_passwordConfirmation.setForeground(color3);
        }
    }

    private void field_nicknameFocusGained(java.awt.event.FocusEvent evt) {                                           
        if(field_nickname.getText().trim().toLowerCase().equals("nickname")) {
            field_nickname.setText("");
            field_nickname.setForeground(Color.BLACK);
        }  
    }                                          

    private void field_nicknameFocusLost(java.awt.event.FocusEvent evt) {                                         
        if(field_nickname.getText().trim().toLowerCase().equals("nickname") || field_nickname.getText().trim().toLowerCase().equals("")) {
            field_nickname.setText("nickname");
            field_nickname.setForeground(color3);
        }
    }                                        

    // Variables declaration - do not modify                     
    private javax.swing.JButton button_gameSettings;
    private javax.swing.JButton button_logout;
    private javax.swing.JButton button_quickPlay;
    private javax.swing.JButton button_register;
    private javax.swing.JButton button_showRank;
    private javax.swing.JTextField field_nickname;
    private javax.swing.JPasswordField field_password;
    private javax.swing.JPasswordField field_passwordConfirmation;
    private javax.swing.JTextField field_user;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lab_iconSnake;
    private javax.swing.JLabel label_close;
    private javax.swing.JLabel label_minimize;
    private javax.swing.JLabel label_nickname;
    private javax.swing.JLabel label_password;
    private javax.swing.JLabel label_passwordConfirmation;
    private javax.swing.JLabel label_play;
    private javax.swing.JLabel label_stop;
    private javax.swing.JLabel label_user;
    private javax.swing.JPanel panel_title;
    // End of variables declaration                   

    @Override
    public void windowOpened(WindowEvent e) {}
    @Override
    public void windowClosing(WindowEvent e) {}
    @Override
    public void windowClosed(WindowEvent e) {}
    @Override
    public void windowActivated(WindowEvent e) {}
    @Override
    public void windowDeactivated(WindowEvent e) {}
    
    @Override
    public void windowIconified(WindowEvent e) {
        if(music.isRunning() && player.getGameSettings().isIfMusic()){
            music.stop();
            System.out.println("Music stopped");
        }
        System.out.println("Window iconified");
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        if(!music.isRunning() && doesMusicPlay && player.getGameSettings().isIfMusic()){
            music.start();
            System.out.println("Music is back");
        }
        System.out.println("Window deiconified");
    }
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RegisterFrame(new PlayerDAO(true), null, true).setVisible(true);
//            }
//        });
//    }
}

